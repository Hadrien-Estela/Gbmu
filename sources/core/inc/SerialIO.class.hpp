// ************************************************************************** //
//                                                                            //
//                                                        :::      ::::::::   //
//   SerialIO.class.hpp                                 :+:      :+:    :+:   //
//                                                    +:+ +:+         +:+     //
//   By: hestela <hestela@student.42.fr>            +#+  +:+       +#+        //
//                                                +#+#+#+#+#+   +#+           //
//   Created: 2015/12/21 11:21:04 by hestela           #+#    #+#             //
//   Updated: 2015/12/21 11:21:06 by hestela          ###   ########.fr       //
//                                                                            //
// ************************************************************************** //

#ifndef SERIALIO_CLASS_HPP
# define SERIALIO_CLASS_HPP

# include <iostream>

# include "Defines.hpp"

namespace Gbmu
{

	class Cpu;
	
	class SerialIO
	{

		public:
			struct IORegisters
			{
				uint8_t		P1;				// joy pad register 									| 0xFF00
				uint8_t		SB;				// serial Data Transfer									| 0xFF01
				uint8_t		SC;				// SIO control 											| 0xFF02
				uint8_t		UNUSED1;		// ************
				uint8_t		DIV;			// Divider Register 									| 0xFF04
				uint8_t		TIMA;			// Timer counter 										| 0xFF05
				uint8_t		TMA;			// Timer Modulo 										| 0xFF06
				uint8_t		TAC;			// Timer Control 										| 0xFF06
				uint8_t		UNUSED2[0x07];	// ************
				uint8_t		IF;				// Interrupt Flag 										| 0xFF0F
				uint8_t		NR10;			// Sound Mode Register 1 								| 0xFF10
				uint8_t 	NR11;			// Sound Mode Register 1 (Lenght / Wave pattern duty) 	| 0xFF11
				uint8_t		NR12;			// Sound Mode Register 1 (Envelope) 					| 0xFF12
				uint8_t		NR13;			// Sound Mode Register 1 (Low Freq) 					| 0xFF13
				uint8_t		NR14;			// Sound Mode Register 1 (Hight Freq) 					| 0xFF14
				uint8_t		UNUSED3;		// ************
				uint8_t 	NR21;			// Sound Mode Register 2 (Lenght / Wave pattern duty) 	| 0xFF16
				uint8_t		NR22;			// Sound Mode Register 2 (Envelope) 					| 0xFF17
				uint8_t		NR23;			// Sound Mode Register 2 (Low Freq) 					| 0xFF18
				uint8_t		NR24;			// Sound Mode Register 2 (Hight Freq) 					| 0xFF19
				uint8_t		NR30;			// Sound Mode Register 3 (On/Off) 						| 0xFF1A
				uint8_t		NR31;			// Sound Mode Register 3 (Lenght) 						| 0xFF1B
				uint8_t		NR32;			// Sound Mode Register 3 (outut Level) 					| 0xFF1C
				uint8_t		NR33;			// Sound Mode Register 3 (Low Freq) 					| 0xFF1D
				uint8_t		NR34;			// Sound Mode Register 3 (Hight Freq) 					| 0xFF1E
				uint8_t		UNUSED4;		// ************
				uint8_t		NR41;			// Sound Mode Register 4 (Lenght) 						| 0xFF20
				uint8_t		NR42;			// Sound Mode Register 4 (Envelope) 					| 0xFF21
				uint8_t		NR43;			// Sound Mode Register 4 (polynomial/counter) 			| 0xFF22
				uint8_t		NR44;			// Sound Mode Register 4 (counter/consecutive) 			| 0xFF23
				uint8_t		NR50;			// Channel control / ON-OFF / Volume 					| 0xFF24
				uint8_t		NR51;			// Selection of Sound output terminal 					| 0xFF25
				uint8_t		NR52;			// Sound on/off 										| 0xFF26
				uint8_t		UNUSED5[0x09];	// ************
				uint8_t		WAV_RAM[0x10];	// 32 * 4bits 											| 0xFF30
				uint8_t		LCDC;			// LCD Control 											| 0xFF40
				uint8_t		STAT;			// LCD Status 											| 0xFF41
				uint8_t		SCY;			// Scroll Y 											| 0xFF42
				uint8_t		SCX;			// Scroll X 											| 0xFF43
				uint8_t		LY;				// current Scanline										| 0xFF44
				uint8_t		LYC;			// LY Compare 											| 0xFF45
				uint8_t 	DMA;			// DMA Transfer and start adress 						| 0xFF46
				uint8_t		BGP;			// BG & WIN color Palette Data 							| 0xFF47
				uint8_t		OBP0;			// OBJ color Palette 0 Data 							| 0xFF48
				uint8_t		OBP1;			// OBJ color Palette 1 Data 							| 0xFF49
				uint8_t		WY;				// Window Y Position ( 0 <= WY <= 143 ) 				| 0xFF4A
				uint8_t		WX;				// Window X Position ( 0 <= WX <= 166 ) 				| 0xFF4B
				uint8_t		UNUSED6;		// ************
				uint8_t		KEY1;			// CGB Mode Only - CPU Speed Selection					| 0xFF4D
				uint8_t		UNUSED7;		// ************
				uint8_t		VBK;			// CGB Mode Only - VRAM Bank Select 					| 0xFF4F
				uint8_t		BOOTSTP;		// BOOT interrupt (write any value stop the boot)		| 0xFF50
				uint8_t		HDMA1;			// CGB Mode Only - HBL General DMA						| 0xFF51
				uint8_t		HDMA2;			// CGB Mode Only - HBL General DMA						| 0xFF52
				uint8_t		HDMA3;			// CGB Mode Only - HBL General DMA						| 0xFF53
				uint8_t		HDMA4;			// CGB Mode Only - HBL General DMA						| 0xFF54
				uint8_t		HDMA5;			// CGB Mode Only - HBL General DMA						| 0xFF55
				uint8_t		RP;				// CGB Mode Only - Infrared Communications Port 		| 0xFF56
				uint8_t		UNUSED8[0x11];	// ************
				uint8_t		BCPS;			// CGB Mode Only - BG Color palette specs				| 0xFF68
				uint8_t		BCPD;			// CGB Mode Only - BG Color palette data				| 0xFF69
				uint8_t		OCPS;			// CGB Mode Only - OBJ Color palette specs				| 0xFF6A
				uint8_t		OCPD;			// CGB Mode Only - OBJ Color palette data				| 0xFF6B
				uint8_t		UNUSED9[0x04];	// ************
				uint8_t		SVBK;			// CGB Mode Only - WRAM Bank Select						| 0xFF70
				uint8_t		UNUSED10[0x0F];	// ************
				uint8_t		STACK[0x7F];	// RAM for stack 										| 0xFF80 - 0xFFFE
				uint8_t		IE;				// Interrupt Enable										| 0xFFFF
			};

		private:
			Cpu*							_cpu;							// get poiter to CPU ( the parent )
			struct IORegisters*				_registers; 					// IO Registers GB memory
			const uint8_t					_initialValuesDMG[0x100] = {
				0xCF, 0x00, 0x7E, 0xFF, 0xD3, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
				0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
				0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0x71, 0x72, 0xD5, 0x91, 0x58, 0xBB, 0x2A, 0xFA, 0xCF, 0x3C, 0x54, 0x75, 0x48, 0xCF, 0x8F, 0xD9,
				0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFC, 0xFF, 0xFF, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0x2B, 0x0B, 0x64, 0x2F, 0xAF, 0x15, 0x60, 0x6D, 0x61, 0x4E, 0xAC, 0x45, 0x0F, 0xDA, 0x92, 0xF3,
				0x83, 0x38, 0xE4, 0x4E, 0xA7, 0x6C, 0x38, 0x58, 0xBE, 0xEA, 0xE5, 0x81, 0xB4, 0xCB, 0xBF, 0x7B,
				0x59, 0xAD, 0x50, 0x13, 0x5E, 0xF6, 0xB3, 0xC1, 0xDC, 0xDF, 0x9E, 0x68, 0xD7, 0x59, 0x26, 0xF3,
				0x62, 0x54, 0xF8, 0x36, 0xB7, 0x78, 0x6A, 0x22, 0xA7, 0xDD, 0x88, 0x15, 0xCA, 0x96, 0x39, 0xD3,
				0xE6, 0x55, 0x6E, 0xEA, 0x90, 0x76, 0xB8, 0xFF, 0x50, 0xCD, 0xB5, 0x1B, 0x1F, 0xA5, 0x4D, 0x2E,
				0xB4, 0x09, 0x47, 0x8A, 0xC4, 0x5A, 0x8C, 0x4E, 0xE7, 0x29, 0x50, 0x88, 0xA8, 0x66, 0x85, 0x4B,
				0xAA, 0x38, 0xE7, 0x6B, 0x45, 0x3E, 0x30, 0x37, 0xBA, 0xC5, 0x31, 0xF2, 0x71, 0xB4, 0xCF, 0x29,
				0xBC, 0x7F, 0x7E, 0xD0, 0xC7, 0xC3, 0xBD, 0xCF, 0x59, 0xEA, 0x39, 0x01, 0x2E, 0x00, 0x69, 0x00
			};

			const uint8_t 					_initialValuesCGB[0x100] = {
				0xCF, 0x00, 0x7C, 0xFF, 0x44, 0x00, 0x00, 0xF8, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xE1,
				0x80, 0xBF, 0xF3, 0xFF, 0xBF, 0xFF, 0x3F, 0x00, 0xFF, 0xBF, 0x7F, 0xFF, 0x9F, 0xFF, 0xBF, 0xFF,
				0xFF, 0x00, 0x00, 0xBF, 0x77, 0xF3, 0xF1, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
				0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x7E, 0xFF, 0xFE,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xC0, 0xFF, 0xC1, 0x00, 0xFE, 0xFF, 0xFF, 0xFF,
				0xF8, 0xFF, 0x00, 0x00, 0x00, 0x8F, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B, 0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D,
				0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E, 0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99,
				0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC, 0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E,
				0x45, 0xEC, 0x42, 0xFA, 0x08, 0xB7, 0x07, 0x5D, 0x01, 0xF5, 0xC0, 0xFF, 0x08, 0xFC, 0x00, 0xE5,
				0x0B, 0xF8, 0xC2, 0xCA, 0xF4, 0xF9, 0x0D, 0x7F, 0x44, 0x6D, 0x19, 0xFE, 0x46, 0x97, 0x33, 0x5E,
				0x08, 0xFF, 0xD1, 0xFF, 0xC6, 0x8B, 0x24, 0x74, 0x12, 0xFC, 0x00, 0x9F, 0x94, 0xB7, 0x06, 0xD5,
				0x40, 0x7A, 0x20, 0x9E, 0x04, 0x5F, 0x41, 0x2F, 0x3D, 0x77, 0x36, 0x75, 0x81, 0x8A, 0x70, 0x3A,
				0x98, 0xD1, 0x71, 0x02, 0x4D, 0x01, 0xC1, 0xFF, 0x0D, 0x00, 0xD3, 0x05, 0xF9, 0x00, 0x0B, 0x00
			};

		public:
			SerialIO( Cpu* cpu );
			virtual ~SerialIO( void );

			void							reset ( void );

			void							onWriteLY ( void );
			void							onWriteLYC ( uint8_t const& value );
			void							onWriteLCDC ( uint8_t const& value );
			void							onWriteDIV ( void );
			void							onWriteSTAT ( uint8_t const& value );
			void							onWriteIF ( uint8_t const& value );
			void							onWriteP1 ( uint8_t const& value );
			void							onWriteTAC ( uint8_t const& value );
			void							onWriteDMA ( uint8_t const& value );
			void							onWriteIE ( uint8_t const& value );
			void							onWriteBOOTSTP ( void );
			void							onWriteVBK ( uint8_t const& value );
			void							onWriteSVBK ( uint8_t const& value );
			void							onWriteBCPS ( uint8_t const& value );
			void							onWriteBCPD ( uint8_t const& value );
			void							onWriteOCPS ( uint8_t const& value );
			void							onWriteOCPD ( uint8_t const& value );
			void							onWriteHDMA1 ( uint8_t const& value );
			void							onWriteHDMA2 ( uint8_t const& value );
			void							onWriteHDMA3 ( uint8_t const& value );
			void							onWriteHDMA4 ( uint8_t const& value );
			void							onWriteHDMA5 ( uint8_t const& value );
			void							onWriteKey1 ( uint8_t const& value );

			void							onWriteSoundRegister ( uint16_t addr, uint8_t value );
			uint8_t							onReadSoundRegister ( uint16_t addr );

			struct SerialIO::IORegisters*	registers ( void ) const;	
	};

}

#else
	namespace Gbmu
	{
		class SerialIO;
	}
#endif // !SERIALIO_CLASS_HPP
